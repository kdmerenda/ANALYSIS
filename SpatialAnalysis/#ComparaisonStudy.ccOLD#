#include "ComparaisonStudy.h"
#include <evt/Event.h>
#include <fevt/FEvent.h>
#include <fevt/Eye.h>
#include <fevt/TelescopeSimData.h>
#include <fevt/Telescope.h>
#include <fevt/PixelSimData.h>
#include <fevt/Pixel.h>
#include <fevt/FdConstants.h>
#include <det/Detector.h>
#include <fdet/FDetector.h>
#include <fdet/Eye.h>
#include <fdet/Telescope.h>
#include <fdet/Camera.h>
#include <fdet/Pixel.h>
#include <fdet/Channel.h>
#include <fdet/Mirror.h>
#include <fdet/Filter.h>
#include <fdet/Corrector.h>

#include <utl/Point.h>
#include <utl/UTMPoint.h>
#include <utl/Particle.h>
#include <utl/Vector.h>
#include <utl/TimeStamp.h>
#include <utl/Particle.h>
#include <utl/ErrorLogger.h>
#include <utl/ReferenceEllipsoid.h>
#include <utl/RandomEngine.h>
#include <fwk/LocalCoordinateSystem.h>
#include <fwk/CoordinateSystemRegistry.h>
#include <fwk/CentralConfig.h>
#include <fwk/SVNGlobalRevision.h>
#include <fwk/RandomEngineRegistry.h>
#include <utl/Math.h>

#include <utl/MathConstants.h>
#include <utl/CoordinateSystemPtr.h>
#include <utl/AxialVector.h>
#include <utl/Vector.h>
#include <utl/PhysicalConstants.h>
#include <utl/AugerUnits.h>
#include <utl/UTCDateTime.h>
#include <CLHEP/Random/Randomize.h>

#include <TMap.h>
#include <TTree.h>
#include <TGraph.h>
#include <TCanvas.h>
#include <TCutG.h>
#include <TH2D.h>
#include <THStack.h>
#include <TLegend.h>
#include <TStyle.h>
#include <TLatex.h>
#include <TH1D.h>
#include <TF1.h>
#include <TFile.h>
#include <TVector3.h>
#include <vector>
#include <AugerEvent.h>
#include <EyeEvent.hh>
#include <EyePixelList.hh>
#include <FadcData.hh>
#include <TPaletteAxis.h>

using namespace std;
using namespace utl;
using namespace fwk;
using namespace evt;
using namespace fevt;
using namespace fdet;
using namespace det;
using CLHEP::RandFlat;

namespace ComparaisonStudyNS {

// Initialize your static data members.

// Define the methods preferibly in the same order as listed in the header file.

ComparaisonStudy::ComparaisonStudy() 
{
  // Initialize your class.
  // Prefer initialization lists over = to 
  // initialize your members.
}

ComparaisonStudy::~ComparaisonStudy()
{
}

VModule::ResultFlag 
ComparaisonStudy::Init()
{
  fData = false;
  
  fEventCounter = 0;
  
  eventChecker.push_back("no events yet");

  outputPlots = new TFile("FullTraces.root","recreate");

  for(int i = 0; i < fNRows; i++){  
    TString hPixelRowName("hPixelRow");hPixelRowName+= (i+1);
    TString hPixelRowTitle("Row ");hPixelRowTitle+= (i+1);hPixelRowTitle+= ";Time Bin (100 ns);Column Number;ADC Counts / 2 Time Bins";
    hPixelRow[i] = new TH2F(hPixelRowName,hPixelRowTitle,1500,0,3000-1,fNColumns,0,fNColumns);
  }

  const TimeStamp times = UTCDateTime(2017,05,19,0,0).GetTimeStamp();
  Detector::GetInstance().Update(times);const fdet::FDetector& detFD = det::Detector::GetInstance().GetFDetector();
  const fdet::Eye& detEye = detFD.GetEye(4);
  const fdet::Telescope& detTel = detEye.GetTelescope(4);
  for(int i = 0; i < fNTels; i++){
    for(int j = 0; j < fNPixels; j++){
      TString hname("hRawData_tel");hname+=i+1;hname+="_r";hname+=detTel.GetPixel(j+1).GetRow();hname+="_c";hname+=detTel.GetPixel(j+1).GetColumn();
      //      TString htitle("Raw Pixel Data");
      fhRawPixelData[i][j] = new TH1F(hname,hname,1500,0,3000-1);
    }
  }
  //  outputPlots->Close();
  return eSuccess;
}

VModule::ResultFlag 
ComparaisonStudy::Run(evt::Event& event)
{
  
  const evt::Header& header = event.GetHeader();
  
  //  if (!(header.GetId() == "eye4_run5767_event958")) return eSuccess;
  //for data
  //  if (!(header.GetId() == "eye4_run6402_event432" || header.GetId() == "eye4_run6402_event433" || header.GetId() == "eye4_run6402_event434")) return eSuccess; //select events of interest. 
  
  
  AugerEvent& rawEvent = event.GetRawEvent();
  INFO("New Raw Event!");
  fEventCounter++;
  if (fEventCounter > 3) return eSuccess;
  for (AugerEvent::EyeIterator eyeIter = rawEvent.EyesBegin();
       eyeIter != rawEvent.EyesEnd(); ++eyeIter) {
    
    TEyeEvent& eyeEvent = *eyeIter;
    TEyePixelList* eyePixelList = eyeEvent.GetPixelList();
    TEyeFADCData* eyeFADCData = eyeEvent.GetFADCData();
    const unsigned int numpixels = eyePixelList->GetNumPixels();
    TEyeEventHeader *eyeHeader = eyeEvent.GetEventHeader();
    const int eyeId = eyeEvent.GetEventHeader()->GetEyeNo();
    const fdet::FDetector& detFD = det::Detector::GetInstance().GetFDetector();
    FEvent& fdEvent = event.GetFEvent();
    fevt::Eye& eye = fdEvent.GetEye(eyeId);
    const fdet::Eye& detEye = detFD.GetEye(eyeId);


    cout << eyeEvent.GetEventHeader()->GetEventNo() << " " << eyePixelList->GetNumPixels() << " " <<  eyePixelList->GetEyeNo() << endl;
    cout << eyeId << endl;

    TString fName("");
    if(fData){fName+="tracesData.root";}else{fName+="tracesSimulation.root";}
    TFile *fTMP;
    if( fEventCounter ==1) {
      fTMP = new TFile(fName,"recreate");
    }else{
      fTMP = new TFile(fName,"update");
    }
    for (unsigned int iPixel = 0; iPixel < eyePixelList->GetNumPixels(); ++iPixel) {
      
      FdUtil::Fd::FdPixelNumber pixelNumber = eyePixelList->GetPixel(iPixel);
      const unsigned int mirrorId = FdUtil::Fd::GetEyeMirrorNo(pixelNumber);
      fevt::Telescope& tel = eye.GetTelescope(mirrorId);
      //cout << " detEye " << eyeId<<endl;
      const fdet::Telescope& detTel = detEye.GetTelescope(mirrorId);
      const unsigned int channelId = FdUtil::Fd::GetMirrorPixelNo(pixelNumber);
      //     const unsigned int pixelId = FdUtil::Fd::GetPixelNo(pixelNumber);
      
      const TFADCData* fadcData = eyeFADCData->GetFADCData(pixelNumber);

      
      const fdet::Channel& thisChannel = detTel.GetChannel(channelId);
      const unsigned int pixelId = thisChannel.GetPixelId();


      if (!fadcData || thisChannel.IsVirtual()) {
	continue;
      }
      //   cout << mirrorId << " " << channelId << " " << pixelId << endl;
      
      
      const unsigned int startBin = fadcData->GetTraceStartBin();
      const unsigned int endBin = fadcData->GetTraceEndBin();
      
      TFADCData::FADCDataWord fadcword = fadcData->GetFADCTrace();
      
            
      //      int telIndex = (LeftMostBay - mirrorId)%6;
      //      int telIndex = 4;
        
      // PEDESTAL CALCULATION : the first 300 bins
      //      if(fEventCounter == 1){
       baseline=0.;
       baselineRMS=0.;
      
	for (unsigned int pos = startBin; pos <startBin+100; ++pos) baseline += int(FADCDataWordGetData(&fadcword[pos]))/100.;

	
	for (unsigned int pos = startBin; pos <startBin+280; ++pos) baselineRMS += pow(int(FADCDataWordGetData(&fadcword[pos])),2)/280.;
      
	baselineRMS -= pow(baseline,2);
	if (baselineRMS>0) baselineRMS=sqrt(baselineRMS);
	else baselineRMS=0.;
	//      }

	//      if(fEventCounter > 1){
	baselinetail=0.;
	for (unsigned int pos = endBin-100; pos < endBin; ++pos) baselinetail += int(FADCDataWordGetData(&fadcword[pos]))/100.;
	//      }
      
      TString hName("h"); hName+=fEventCounter;hName+="_m";hName+=mirrorId;hName+="_r";hName+=detTel.GetPixel(pixelId).GetRow();hName+="_c";hName+=detTel.GetPixel(pixelId).GetColumn();
      cout <<  hName.Data()<< " " <<   baseline  << " " << baselinetail << endl;
      
      //      if(fEventCounter == 2) cout << startBin << " " << endBin << endl;
      TH1F* trace = new TH1F(hName,hName,500,startBin,endBin);

      for (unsigned int pos = startBin; pos <= endBin; ++pos) {
	//if (pos%100 == 0)cout << pos << endl;
	// here we get the DATA at address pos;

	//must not be the way to get charge 
	charge = FADCDataWordGetData(&fadcword[pos]);
	//	cout << FADCDataWordGetData(&fadcword[0]) << endl;
       	// if (pixelId-1 < 440)fhRawPixelData[telIndex][pixelId-1]->Fill((pos*(fEventCounter-1))*0.2,charge);
	// if (fhRawPixelData[telIndex][pixelId-1]->GetEntries() == 0) delete fhRawPixelData[telIndex][pixelId-1];
	//   	if (pixelId-1 < 440) trace.Fill((pos*(fEventCounter-1))*0.2,charge);
	
 	if (pixelId <= 440 && abs(baseline-baselinetail) > 10 && baseline >baselinetail){
	  trace->Fill(pos,charge-baselinetail);
	}else{
	  trace->Fill(pos,charge-baseline);
	}
      }//trace loop
      // trace->Rebin(2);
      //      if (trace->GetEntries() == 0 || !(detTel.GetPixel(pixelId).GetRow()==10) || mirrorId != 4){
      //      if (trace->GetEntries() == 0 || mirrorId != 4){
      if (mirrorId != 3){//attempt at merging sim
	delete trace;
	continue;
      }
      //      if (detTel.GetPixel(pixelId).GetRow()==10 && detTel.GetPixel(pixelId).GetColumn()==8) cout << "mirror:  "  << mirrorId << " pixelId: " <<  pixelId << " eventnum: " << fEventCounter << " Max: " << trace->GetMaximum() <<  endl;
      GlueTrace(trace, mirrorId, pixelId);
      
    }//pixel loop
    fTMP->Write();
    fTMP->Close();

    if( fEventCounter < 3) return eSuccess;

    const fdet::Telescope& detTel = detEye.GetTelescope(4);
    
    
    for(int i = 0; i < fNTels; i++){
      for(int j = 0; j < fNPixels; j++){
	//	if(fhRawPixelData[i][j]->GetEntries() == 0 ||
	// fhRawPixelData[i][j]->GetMaximum() < 50){
	if(fhRawPixelData[i][j]->GetEntries() == 0){
	  delete fhRawPixelData[i][j];
	  continue;
	}

	for(int iBin = 1; iBin <= fhRawPixelData[i][j]->GetNbinsX(); iBin++){ 
	  hPixelRow[detTel.GetPixel(j+1).GetRow()-1]->SetBinContent(int(iBin),detTel.GetPixel(j+1).GetColumn(),fhRawPixelData[i][j]->GetBinContent(iBin));
				   
	}
      }
    }
      
  }//mirror loop



  //  if( fEventCounter < 3)  return eSuccess;
  outputPlots->Write();
  outputPlots->Close();
   return eSuccess;

  
  TCanvas* cglues = new TCanvas("cglues","cglues",1000,800);
  gStyle->SetOptStat(0);
  for(int i=4; i <= 15; i++){

    hPixelRow[i-1]->Draw("colz");
    hPixelRow[i-1]->GetZaxis()->SetTitleOffset(0.98);
    cglues->Update();
    TPaletteAxis *palette =
      (TPaletteAxis*)hPixelRow[i-1]->GetListOfFunctions()->FindObject("palette");
    palette->SetX1NDC(0.9);
    palette->SetX2NDC(0.92);
    palette->SetY1NDC(0.1);
    palette->SetY2NDC(0.9);
    // palette->SetX1NDC(0.1);
    // palette->SetX2NDC(0.12);
    // palette->SetY1NDC(0.1);
    // palette->SetY2NDC(0.5);
    cglues->Modified();
    TString fNameGlues("glues/");fNameGlues+=hPixelRow[i-1]->GetName();fNameGlues+=".png";
    cglues->SaveAs(fNameGlues.Data());
  }

  TH2F* h2TMP = new TH2F("h2TMP","Row 7;Column Number;Time Bin (1000 ns)",fNColumns,0,fNColumns,50,0,999);
   for(int iBinx = 1; iBinx <= 999; iBinx++){
     for(int iBiny = 1; iBiny <= hPixelRow[8]->GetNbinsY(); iBiny++){
       double bincontent = hPixelRow[8]->GetBinContent(iBinx,iBiny);
       if(bincontent > 30) h2TMP->SetBinContent(iBiny,iBinx,bincontent);
     }
   }
   

   TF1 parabolaFit("parabolaFit","[0]+[1]*pow((x-[2]),2)",0,20);
   parabolaFit.SetParameter(0,500);
   parabolaFit.SetParameter(1,1);
   parabolaFit.SetParameter(2,10);
   //   parabolaFit.SetParameter(3,1);
  TCanvas* cparab = new TCanvas("cparab","cparab",800,600);
  TLegend* legend = new TLegend(.6,.1,.9,.4);
  //  TF1 parabolaFit("parabolaFit","pol2",0,3000);

  h2TMP->Fit(&parabolaFit,"R");
  Double_t p0 = parabolaFit.GetParameter(0);
  Double_t p0e = parabolaFit.GetParError(0);
  Double_t p1 = parabolaFit.GetParameter(1);
  Double_t p1e = parabolaFit.GetParError(1);
  Double_t p2 = parabolaFit.GetParameter(2);
  Double_t p2e = parabolaFit.GetParError(2);
  //  Double_t chi2 = parabolaFit.GetChisquare()/(parabolaFit.GetNumberFitPoints()-3);
  legend->AddEntry(&parabolaFit, "A+B*(x-C)^{2}");
  legend->AddEntry((TObject*)0, TString::Format("A = %.0f #pm %.0f [Time Bins]",p0,p0e),"");
  //  legend->AddEntry((TObject*)0, TString::Format("B = %.0f #pm %.0f [Counts]",p1,p1e),"");
  legend->AddEntry((TObject*)0, TString::Format("C = %.0f #pm %.0f [Row]",p2,p2e),"");
  //  legend->AddEntry((TObject*)0, TString::Format("Reduced #chi^{2}: %.3f",chi2),"");

 
  h2TMP->Draw("colz");
  cparab->Update();
  parabolaFit.Draw("same");
  legend->Draw();
  cparab->SaveAs("parabfit.png");
  
  outputPlots->Write();
  outputPlots->Close();

  
  return eSuccess;
}

VModule::ResultFlag 
ComparaisonStudy::Finish() 
{
  
  return eSuccess;
}

  
  
VModule::ResultFlag
ComparaisonStudy::GlueTrace(TH1F* theTrace, int telId, int pixelId) 
{
  //we have the trace to glue, the mirror and  the overall long trace, adn the event num. Need to use get bin content to sort things out properly.
  //  outputPlots->Open();
  //  cout << fEventCounter << endl;
  //  if (fEventCounter == 2) cout << theTrace->GetNbinsX() << " "  << (fEventCounter-1)*1000 <<endl;
  double theTraceMax = theTrace->GetMaximum();
  double theTraceMin = theTrace->GetMinimum();
  for(int iBin = 1; iBin <= theTrace->GetNbinsX(); iBin++){
    //    double normalizedBinContent = (theTrace->GetBinContent(iBin) - theTraceMin) / (theTraceMax - theTraceMin);
    double normalizedBinContent = theTrace->GetBinContent(iBin);

    fhRawPixelData[telId-1][pixelId-1]->SetBinContent(iBin+(fEventCounter-1)*500,normalizedBinContent);
  }
  return eSuccess;
}




}
